
<div class="w-64 grid grid-cols-7 gap-1">

    <div class="w-64 h-8 col-span-7 grid grid-cols-7 bg-green-100">
        @foreach (var day in DaysOfWeek.Values)
        {
            <div class="w-8 h-8 flex items-center justify-center">
                @day.Substring(0, 2)
            </div>
        }
    </div>
    
    @for (var i = 1; i < GetEmptyCellsCount(DisplayedMonth); i++)
    {
        <div class="w-8 h-8 flex items-center justify-center">
            &nbsp;
        </div>
    }

    @foreach (var day in GetDays(DisplayedMonth))
    {
        <div class="w-8 h-8 flex items-center justify-center">
            <button class="w-8 h-8 hover:bg-green-100 rounded-5xl cursor-pointer @(IsCurrentSelectedDay(day) ? "bg-green-400" : "")" @onclick="() => SelectDay(day)">
                @day.Day
            </button>
        </div>
    }
</div>

@code {
    
    [Parameter, EditorRequired] public required DateOnly DisplayedMonth { get; set; }
    
    [Parameter, EditorRequired] public required DateOnly SelectedDate { get; set; }
    
    [Parameter] public EventCallback<DateOnly> SelectedDateChanged { get; set; }

    [Parameter] public IDictionary<DayOfWeek, string> DaysOfWeek { get; set; } = DefaultLexical.GetDaysOfWeek();
    
    private IEnumerable<DateTime> GetDays(DateOnly date) => Enumerable
        .Range(0, DateTime.DaysInMonth(date.Year, date.Month))
        .Select(d => new DateTime(date.Year, date.Month, d + 1));

    
    private int GetEmptyCellsCount(DateOnly month) => (int)month.DayOfWeek;

    private bool IsCurrentSelectedDay(DateTime day) => DateOnly.FromDateTime(day) == SelectedDate;

    private async Task SelectDay(DateTime date)
    {
        var day = DateOnly.FromDateTime(date);
        await SelectedDateChanged.InvokeAsync(day);
    }

}