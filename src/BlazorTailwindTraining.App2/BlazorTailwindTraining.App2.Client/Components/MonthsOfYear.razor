
<DatePickerTopBar LoadNextMonth="LoadNextMonth" LoadPreviousMonth="LoadPreviousMonth">
    @Year
</DatePickerTopBar>


<div class="w-64 grid grid-cols-2 gap-1 mb-2">

    @foreach (var (index, name) in Months)
    {
        <div class="truncate w-32 h-6 flex items-center justify-center px-2">
            <button class="w-32 h-6 cursor-pointer hover:bg-green-100 @(Month == index ? "border border-green-200" : "")" @onclick="() => SelectMonth(index)">
                @ShortName(name)
            </button>
        </div>
    }

</div>

@code {

    [Parameter] 
    public IDictionary<int, string> Months { get; set; } = DefaultLexical.GetMonths();

    [Parameter, EditorRequired]
    public required int Year { get; set; }
    
    [Parameter]
    public EventCallback<int> YearChanged { get; set; }
    
    [Parameter, EditorRequired]
    public required int Month { get; set; }
    
    [Parameter]
    public EventCallback<int> MonthChanged { get; set; }
    
    private string ShortName(string name)
    {
        if (name.Length > 6)
            return name[..1].ToUpper() + name[1..3] + ".";

        return name[..1].ToUpper() + name[1..];
    }

    private async Task LoadNextMonth()
    {
        Year++;
        await YearChanged.InvokeAsync(Year);
    }

    private async Task LoadPreviousMonth()
    {
        Year--;
        await YearChanged.InvokeAsync(Year);
    }

    private async Task SelectMonth(int month)
    {
        Month = month;
        await MonthChanged.InvokeAsync(Month);
    }

}