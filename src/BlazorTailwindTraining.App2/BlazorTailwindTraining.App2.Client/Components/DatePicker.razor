
<div class="w-64 gris justify-center">
    
    @if (monthMode)
    {
        <div class="grid gap-1 text-sm w-64 border border-green-500 rounded justify-center overflow-hidden shadow-md shadow-gray-400">
            <MonthsOfYear Year="@Year" Month="@Month" YearChanged="OnYearSelected" MonthChanged="OnMonthSelected"></MonthsOfYear>
        </div>
    }
    else
    {
        <div class="grid gap-1 text-sm w-64 border border-green-500 rounded justify-center overflow-hidden shadow-md shadow-gray-400">

            <DatePickerTopBar LoadNextMonth="LoadNextMonth" LoadPreviousMonth="LoadPreviousMonth">
                <button class="cursor-pointer hover:bg-green-100" @onclick="@EnterMonthMode">
                    @DisplayedMonth.ToString("MMMM yyyy")
                </button>
            </DatePickerTopBar>

            <div class="text-sm w-192 overflow-hidden">
                <div class="flex @SliderCssClass" style="@SliderStyle">
                    <DaysOfMonth DaysOfWeek="DaysOfWeek" DisplayedMonth="PreviousMonth"></DaysOfMonth>

                    <DaysOfMonth DaysOfWeek="DaysOfWeek" DisplayedMonth="DisplayedMonth"></DaysOfMonth>

                    <DaysOfMonth DaysOfWeek="DaysOfWeek" DisplayedMonth="NextMonth"></DaysOfMonth>
                </div>
            </div>

        </div>
    }
</div>

@code {

    private int currentOffset = 0;
    private bool monthMode = false;

    private string SliderCssClass => 
        currentOffset == 0 
            ? "" 
            : $"transition-transform duration-400 ease-in-out ease-[cubic-bezier(0.4,0,0.2,1.4)]";
    
    private string SliderStyle => 
        currentOffset == 0 
            ? "" 
            : $"transform: translateX({currentOffset * 224}px);";
    

    [Parameter] public TimeProvider TimeProvider { get; set; } = TimeProvider.System;

    [Parameter] public int Year { get; set; }
    
    [Parameter] public int Month { get; set; }
    
    public DateOnly PreviousMonth => DisplayedMonth.AddMonths(-1);
    
    public DateOnly DisplayedMonth { get; set; }
    
    public DateOnly NextMonth => DisplayedMonth.AddMonths(1);

    [Parameter] public IDictionary<DayOfWeek, string> DaysOfWeek { get; set; } = DefaultLexical.GetDaysOfWeek();
    
    protected override Task OnInitializedAsync()
    {
        if (Year <= 0) Year = TimeProvider.GetLocalNow().Year;
        if (Month <= 0) Month = TimeProvider.GetLocalNow().Month;
        
        DisplayedMonth = new(Year, Month, 1);
        
        return Task.CompletedTask;
    }

    private async Task LoadPreviousMonth()
    {
        currentOffset++;
        await Task.Delay(400); // laisser le slide s'effectuer
        DisplayedMonth = DisplayedMonth.AddMonths(-1);
        currentOffset = 0;
    }

    private async Task LoadNextMonth()
    {
        currentOffset--;
        await Task.Delay(400); // laisser le slide s'effectuer
        DisplayedMonth = DisplayedMonth.AddMonths(1);
        currentOffset = 0;
    }


    private async Task OnYearSelected(int year)
    {
        Year = year;
        DisplayedMonth = new(year, Month, 1);
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnMonthSelected(int month)
    {
        Month = month;
        DisplayedMonth = new(Year, month, 1);
        LeaveMonthMode();
        
        await InvokeAsync(StateHasChanged);
    }

    private void EnterMonthMode() => monthMode = true;
    
    private void LeaveMonthMode() => monthMode = false;

}