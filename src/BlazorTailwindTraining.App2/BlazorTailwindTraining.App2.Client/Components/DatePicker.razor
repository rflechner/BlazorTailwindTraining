
<div class="w-full flex justify-center">
    
    <div class="grid gap-1 text-sm w-64 border border-green-500 rounded justify-center">
        
        <div class="flex w-full justify-center">
            <div class="text-center font-semibold mb-2 flex w-64">
                <div class="flex-none">
                    <button class="hover:bg-green-200 cursor-pointer p-2 m-2 rounded-2xl">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="size-4">
                            <path fill-rule="evenodd" d="M9.78 4.22a.75.75 0 0 1 0 1.06L7.06 8l2.72 2.72a.75.75 0 1 1-1.06 1.06L5.47 8.53a.75.75 0 0 1 0-1.06l3.25-3.25a.75.75 0 0 1 1.06 0Z" clip-rule="evenodd"/>
                        </svg>
                    </button>
                </div>
                <div class="flex-1 p-2 pt-4 pb-4">
                    @DisplayedMonth.ToString("MMMM yyyy")
                </div>
                <div class="flex-none">
                    <button id="next-month" class="hover:bg-green-200 cursor-pointer p-2 m-2 rounded-2xl">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="size-4">
                            <path fill-rule="evenodd" d="M6.22 4.22a.75.75 0 0 1 1.06 0l3.25 3.25a.75.75 0 0 1 0 1.06l-3.25 3.25a.75.75 0 0 1-1.06-1.06L8.94 8 6.22 5.28a.75.75 0 0 1 0-1.06Z" clip-rule="evenodd"/>
                        </svg>
                    </button>
                </div>
            </div>
        </div>

        <div class="w-full grid gap-1 text-sm border border-red-500 rounded">
            <div class="flex">
                <DaysOfMonth DaysOfWeek="DaysOfWeek" DisplayedMonth="PreviousMonth"></DaysOfMonth>

                <DaysOfMonth DaysOfWeek="DaysOfWeek" DisplayedMonth="DisplayedMonth"></DaysOfMonth>

                <DaysOfMonth DaysOfWeek="DaysOfWeek" DisplayedMonth="NextMonth"></DaysOfMonth>
            </div>
        </div>

    </div>
    
</div>


@code {

    [Parameter] public TimeProvider TimeProvider { get; set; } = TimeProvider.System;

    [Parameter] public int Year { get; set; }
    
    [Parameter] public int Month { get; set; }
    
    public DateOnly PreviousMonth => DisplayedMonth.AddMonths(-1);
    
    public DateOnly DisplayedMonth => new(Year, Month, 1);
    
    public DateOnly NextMonth => DisplayedMonth.AddMonths(1);

    [Parameter] public Dictionary<DayOfWeek, string> DaysOfWeek { get; set; } = DefaultLexical.DaysOfWeek;
    
    protected override Task OnInitializedAsync()
    {
        if (Year <= 0) Year = TimeProvider.GetLocalNow().Year;
        if (Month <= 0) Month = TimeProvider.GetLocalNow().Month;
        
        return Task.CompletedTask;
    }

}