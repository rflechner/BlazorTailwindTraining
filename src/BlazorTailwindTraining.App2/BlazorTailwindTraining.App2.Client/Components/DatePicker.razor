
<div class="w-full flex">
    
    <!-- Mois précédent -->
    <div class="grid grid-cols-7 gap-1 text-sm w-64 border border-green-500 rounded">
        <div class="col-span-7 text-center font-semibold mb-2">@PreviousMonth.ToString("MMMM yyyy")</div>

        @foreach (var day in DaysOfWeek.Values)
        {
            <div class="w-8 h-8 flex items-center justify-center rounded hover:bg-green-200 cursor-pointer">
                @day.Substring(0, 2)
            </div>
        }

        @for (var i = 1; i < GetEmptyCellsCount(PreviousMonth); i++)
        {
            <div class="w-8 h-8 flex items-center justify-center rounded hover:bg-green-200 cursor-pointer">
                &nbsp;
            </div>
        }


        @foreach (var day in GetDays(PreviousMonth))
        {
            <div class="w-8 h-8 flex items-center justify-center rounded hover:bg-green-200 cursor-pointer">
                @day.Day
            </div>
        }
        
    </div>

    <!-- Mois courant -->
    <div class="grid grid-cols-7 gap-1 text-sm w-64 border border-green-500 rounded">
        <div class="col-span-7 text-center font-semibold mb-2">@DisplayedMonth.ToString("MMMM yyyy")</div>

        @foreach (var day in DaysOfWeek.Values)
        {
            <div class="w-8 h-8 flex items-center justify-center rounded hover:bg-green-200 cursor-pointer">
                @day.Substring(0, 2)
            </div>
        }

        @for (var i = 1; i < GetEmptyCellsCount(DisplayedMonth); i++)
        {
            <div class="w-8 h-8 flex items-center justify-center rounded hover:bg-green-200 cursor-pointer">
                &nbsp;
            </div>
        }
        
        @foreach (var day in GetDays(DisplayedMonth))
        {
            <div class="w-8 h-8 flex items-center justify-center rounded hover:bg-green-200 cursor-pointer">
                @day.Day
            </div>
        }

    </div>

    <!-- Mois suivant -->
    <div class="grid grid-cols-7 gap-1 text-sm w-64 border border-green-500 rounded">
        <div class="col-span-7 text-center font-semibold mb-2">@NextMonth.ToString("MMMM yyyy")</div>

        @foreach (var day in DaysOfWeek.Values)
        {
            <div class="w-8 h-8 flex items-center justify-center rounded hover:bg-green-200 cursor-pointer">
                @day.Substring(0, 2)
            </div>
        }
        
        @for (var i = 1; i < GetEmptyCellsCount(NextMonth); i++)
        {
            <div class="w-8 h-8 flex items-center justify-center rounded hover:bg-green-200 cursor-pointer">
                &nbsp;
            </div>
        }

        @foreach (var day in GetDays(NextMonth))
        {
            <div class="w-8 h-8 flex items-center justify-center rounded hover:bg-green-200 cursor-pointer">
                @day.Day
            </div>
        }
    </div>
    
</div>


@code {

    [Parameter] public TimeProvider TimeProvider { get; set; } = TimeProvider.System;

    [Parameter] public int Year { get; set; }
    
    [Parameter] public int Month { get; set; }

    //[Parameter] public DateOnly CurrentDay { get; set; }

    public DateOnly PreviousMonth => DisplayedMonth.AddMonths(-1);
    
    public DateOnly DisplayedMonth => new(Year, Month, 1);
    
    public DateOnly NextMonth => DisplayedMonth.AddMonths(1);

    [Parameter] public Dictionary<DayOfWeek, string> DaysOfWeek { get; set; } = new()
        {
            { DayOfWeek.Monday, "Lundi" },
            { DayOfWeek.Tuesday, "Mardi" },
            { DayOfWeek.Wednesday, "Mercredi" },
            { DayOfWeek.Thursday, "Jeudi" },
            { DayOfWeek.Friday, "Vendredi" },
            { DayOfWeek.Saturday, "Samedi" },
            { DayOfWeek.Sunday, "Dimance" },
        };
    
    private IEnumerable<DateTime> GetDays(DateOnly date) => Enumerable
        .Range(0, DateTime.DaysInMonth(date.Year, date.Month))
        .Select(d => new DateTime(date.Year, date.Month, d + 1));


    private int GetEmptyCellsCount(DateOnly month)
    {
        return (int)month.DayOfWeek;
    }
    
    
    protected override Task OnInitializedAsync()
    {
        if (Year <= 0) Year = TimeProvider.GetLocalNow().Year;
        if (Month <= 0) Month = TimeProvider.GetLocalNow().Month;
        
        return Task.CompletedTask;
    }

}