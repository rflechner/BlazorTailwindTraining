
<div @onmouseenter="OnMouseEnter" @onmouseleave="OnMouseLeave" class="border border-green-300 w-64">
    <div>
        <input type="text" class="w-64 border border-green-200" @onfocusin="OnFocusIn" @onfocusout="OnFocusOut" @bind-value="@SelectedDate" />
    </div>

@if (calendarMode)
{
    <div class="w-64 gris justify-center">
        @if (monthMode)
        {
            <div class="grid gap-1 text-sm w-64 border border-green-500 rounded justify-center overflow-hidden shadow-md shadow-gray-400">
                <MonthsOfYear Year="@Year" Month="@Month" YearChanged="OnYearSelected" MonthChanged="OnMonthSelected"></MonthsOfYear>
            </div>
        }
        else
        {
            <div class="grid gap-1 text-sm w-64 border border-green-500 rounded justify-center overflow-hidden shadow-md shadow-gray-400">

                <DatePickerTopBar LoadNextMonth="LoadNextMonth" LoadPreviousMonth="LoadPreviousMonth">
                    <button class="cursor-pointer hover:bg-green-100" @onclick="@EnterMonthMode">
                        @DisplayedMonth.ToString("MMMM yyyy")
                    </button>
                </DatePickerTopBar>

                <div class="text-sm w-192 overflow-hidden">
                    <div class="flex @SliderCssClass" style="@SliderStyle">
                        <DaysOfMonth DaysOfWeek="DaysOfWeek" DisplayedMonth="PreviousMonth" SelectedDate="SelectedDate" SelectedDateChanged="OnDaySelected"></DaysOfMonth>

                        <DaysOfMonth DaysOfWeek="DaysOfWeek" DisplayedMonth="DisplayedMonth" SelectedDate="SelectedDate" SelectedDateChanged="OnDaySelected"></DaysOfMonth>

                        <DaysOfMonth DaysOfWeek="DaysOfWeek" DisplayedMonth="NextMonth" SelectedDate="SelectedDate" SelectedDateChanged="OnDaySelected"></DaysOfMonth>
                    </div>
                </div>

            </div>
        }
    </div>
}

</div>

@code {

    private int currentOffset = 0;
    private bool monthMode = false;
    private bool calendarMode = false;
    private bool mouseIsOn = false;

    private string SliderCssClass => 
        currentOffset == 0 
            ? "" 
            : $"transition-transform duration-300 ease-in-out ease-[cubic-bezier(0.4,0,0.2,1.4)]";
    
    private string SliderStyle => 
        currentOffset == 0 
            ? "" 
            : $"transform: translateX({currentOffset * 224}px);";
    
    private int Year { get; set; }
    
    private  int Month { get; set; }

    [Parameter] public TimeProvider TimeProvider { get; set; } = TimeProvider.System;

    [Parameter] public DateOnly SelectedDate { get; set; } = DateOnly.FromDateTime(DateTime.Today);
    [Parameter] public EventCallback<DateOnly> SelectedDateChanged { get; set; }
    
    public DateOnly PreviousMonth => DisplayedMonth.AddMonths(-1);
    
    public DateOnly DisplayedMonth { get; set; }
    
    public DateOnly NextMonth => DisplayedMonth.AddMonths(1);

    [Parameter] public IDictionary<DayOfWeek, string> DaysOfWeek { get; set; } = DefaultLexical.GetDaysOfWeek();
    
    protected override Task OnInitializedAsync()
    {
        if (SelectedDate == default) SelectedDate = DateOnly.FromDateTime(TimeProvider.GetLocalNow().Date);
        Year = SelectedDate.Year;
        Month = SelectedDate.Month;
        
        DisplayedMonth = new(Year, Month, 1);
        
        return Task.CompletedTask;
    }

    private async Task LoadPreviousMonth()
    {
        currentOffset++;
        await Task.Delay(300); // laisser le slide s'effectuer
        DisplayedMonth = DisplayedMonth.AddMonths(-1);
        currentOffset = 0;
    }

    private async Task LoadNextMonth()
    {
        currentOffset--;
        await Task.Delay(300); // laisser le slide s'effectuer
        DisplayedMonth = DisplayedMonth.AddMonths(1);
        currentOffset = 0;
    }

    private async Task OnYearSelected(int year)
    {
        Year = year;
        DisplayedMonth = new(year, Month, 1);
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnMonthSelected(int month)
    {
        Month = month;
        DisplayedMonth = new(Year, month, 1);
        LeaveMonthMode();
        
        await InvokeAsync(StateHasChanged);
    }

    private void EnterMonthMode() => monthMode = true;
    
    private void LeaveMonthMode() => monthMode = false;
    
    private void OnFocusIn()
    {
        Console.WriteLine("OnFocusInt");
        calendarMode = true;
    }

    private void OnFocusOut()
    {
        Console.WriteLine("OnFocusOut");
        if (!mouseIsOn)
            calendarMode = false;
    }

    private void OnMouseEnter()
    {
        Console.WriteLine("OnMouseEnter");
        mouseIsOn = true;
    }

    private void OnMouseLeave()
    {
        Console.WriteLine("OnMouseLeave");
        mouseIsOn = false;
    }

    private async Task OnDaySelected(DateOnly day)
    {
        SelectedDate = day;
        await SelectedDateChanged.InvokeAsync(day);
        calendarMode = false;
        await InvokeAsync(StateHasChanged);
    }

}